frequency_counts$dominant_color <- fct_rev(reorder(frequency_counts$dominant_color, frequency_counts$n))
top_colors <- frequency_counts[frequency_counts$below_thresh == FALSE,]$dominant_color
data$dominant_color <- factor(data$dominant_color, levels = c('OTHER',rev(top_colors)))
data$Group <- fct_rev(reorder(data$Group,data$Group,FUN=length))
levels(data$Group) <- abbreviate(levels(data$Group), 3)
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#bcb9b8', '#AF6C00', '#D2B48C', '#faf0be', '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
rev(top_colors)
top_colors
setwd(dir = '/Users/ujjwalpeshin/Desktop/HW/EDA/HW3/')
ggthemr('fresh')
data <- read.csv('./NYCdogs.csv', na.strings = c('n/a', ' ', 'NA'))
frequency_counts <- data %>% group_by(dominant_color) %>% summarise(n = n(), freq = n/nrow(data), below_thresh = n < 4241)
levels(data$dominant_color)[levels(data$dominant_color) %in% frequency_counts[frequency_counts$below_thresh == TRUE,]$dominant_color] <- 'OTHER'
data$dominant_color[is.na(data$dominant_color)] <- 'OTHER'
frequency_counts$dominant_color <- fct_rev(reorder(frequency_counts$dominant_color, frequency_counts$n))
top_colors <- frequency_counts[frequency_counts$below_thresh == FALSE,]$dominant_color
top_colors <- as.character(top_colors)
data$dominant_color <- factor(data$dominant_color, levels = c(top_colors,'OTHER'))
data$Group <- fct_rev(reorder(data$Group,data$Group,FUN=length))
levels(data$Group) <- abbreviate(levels(data$Group), 3)
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#bcb9b8', '#AF6C00', '#D2B48C', '#faf0be', '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
top_colors
frequency_counts[frequency_counts$below_thresh == FALSE,]$dominant_color
levels(frequency_counts[frequency_counts$below_thresh == FALSE,]$dominant_color)
levels(frequency_counts$dominant_color)
levels(frequency_counts$dominant_color)[0:4]
levels(frequency_counts$dominant_color)[1:5]
setwd(dir = '/Users/ujjwalpeshin/Desktop/HW/EDA/HW3/')
ggthemr('fresh')
data <- read.csv('./NYCdogs.csv', na.strings = c('n/a', ' ', 'NA'))
frequency_counts <- data %>% group_by(dominant_color) %>% summarise(n = n(), freq = n/nrow(data), below_thresh = n < 4241)
levels(data$dominant_color)[levels(data$dominant_color) %in% frequency_counts[frequency_counts$below_thresh == TRUE,]$dominant_color] <- 'OTHER'
data$dominant_color[is.na(data$dominant_color)] <- 'OTHER'
frequency_counts$dominant_color <- fct_rev(reorder(frequency_counts$dominant_color, frequency_counts$n))
top_colors <- levels(frequency_counts$dominant_color)[1:5]
top_colors <- as.character(top_colors)
data$dominant_color <- factor(data$dominant_color, levels = c(top_colors,'OTHER'))
data$Group <- fct_rev(reorder(data$Group,data$Group,FUN=length))
levels(data$Group) <- abbreviate(levels(data$Group), 3)
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#bcb9b8', '#AF6C00', '#D2B48C', '#faf0be', '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
top_colors
rev(top_colors)
setwd(dir = '/Users/ujjwalpeshin/Desktop/HW/EDA/HW3/')
ggthemr('fresh')
data <- read.csv('./NYCdogs.csv', na.strings = c('n/a', ' ', 'NA'))
frequency_counts <- data %>% group_by(dominant_color) %>% summarise(n = n(), freq = n/nrow(data), below_thresh = n < 4241)
levels(data$dominant_color)[levels(data$dominant_color) %in% frequency_counts[frequency_counts$below_thresh == TRUE,]$dominant_color] <- 'OTHER'
data$dominant_color[is.na(data$dominant_color)] <- 'OTHER'
frequency_counts$dominant_color <- fct_rev(reorder(frequency_counts$dominant_color, frequency_counts$n))
top_colors <- levels(frequency_counts$dominant_color)[1:5]
top_colors <- as.character(top_colors)
data$dominant_color <- factor(data$dominant_color, levels = c('OTHER',rev(top_colors)))
data$Group <- fct_rev(reorder(data$Group,data$Group,FUN=length))
levels(data$Group) <- abbreviate(levels(data$Group), 3)
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#bcb9b8', '#AF6C00', '#D2B48C', '#faf0be', '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#AF6C00', '#D2B48C', '#faf0be','#bcb9b8',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#AF6C00', '#', '#faf0be','#bcb9b8', '#D2B48C',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#AF6C00', '#faf0be','#bcb9b8', '#D2B48C',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#AF6C00', '#D2B48C', '#faf0be','#bcb9b8',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#AF6C00', '#bcb9b8', '#faf0be','#D2B48C',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#bcb9b8', '#AF6C00', '#faf0be','#D2B48C',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
levels(data$dominant_color)
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#faf0be', '#AF6C00', '#D2B48C','#bcb9b8',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
ggplot() + geom_mosaic(data = data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#175483', '#faf0be', '#D2B48C', '#AF6C00','#bcb9b8',  '#3a3939')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
top_colors
modified_data <- data[data$dominant_color!= 'OTHER',]
modified_data$dominant_color <- factor(modified_data$dominant_color, levels = c(top_colors))
ggplot() + geom_mosaic(data = modified_data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#3a3939', '#bcb9b8', '#AF6C00', '#D2B48C', '#faf0be')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
modified_data <- data[data$dominant_color!= 'OTHER',]
modified_data$dominant_color <- factor(modified_data$dominant_color, levels = c(rev(top_colors)))
ggplot() + geom_mosaic(data = modified_data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = c('#3a3939', '#bcb9b8', '#AF6C00', '#D2B48C', '#faf0be')) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
modified_data <- data[data$dominant_color!= 'OTHER',]
modified_data$dominant_color <- factor(modified_data$dominant_color, levels = c(rev(top_colors)))
ggplot() + geom_mosaic(data = modified_data, aes(x = product(dominant_color, Group), fill = dominant_color), na.rm = TRUE) +
scale_fill_manual(values = rev(c('#3a3939', '#bcb9b8', '#AF6C00', '#D2B48C', '#faf0be'))) +
ylab('Dominant Color') +
xlab('Group') +
theme(legend.position="bottom")
frequency_counts
sum(frequency_counts[frequency_counts$below_thresh==TRUE,]$n)
frequency_counts[frequency_counts$below_thresh==FALSE,]$n
frequency_counts[frequency_counts$below_thresh==FALSE,]
abbreviate(levels(data$breed), 15)
abbreviate(levels(data$breed), 6)
abbreviate(levels(data$breed), 3)
data$dominant_color
data$Group
setwd(dir = '/Users/ujjwalpeshin/Desktop/HW/EDA/HW3/')
ggthemr('fresh')
data <- read.csv('./NYCdogs.csv', na.strings = c('n/a', ' ', 'NA'))
# might show the graph to the head of a security group, where he has to decide which dogs to buy.
breed_guard <- data %>%
group_by(breed) %>%
summarise(ratio=sum(guard_or_trained == "Yes") /n() * 100) %>%
arrange(desc(ratio))
top_breeds <- as.character(breed_guard[breed_guard$ratio > 0.5,]$breed)
breed_guard$breed <- fct_other(breed_guard$breed, keep = top_breeds, other_level = 'Others')
top_breeds <- c(top_breeds, 'Others')
breed_guard <- aggregate(ratio ~ breed, breed_guard, sum)
breed_guard$breed <- factor(breed_guard$breed, levels = rev(top_breeds))
ggplot() +
geom_bar(data = breed_guard, aes(x = breed, y = ratio), stat = 'identity', color = 'black') +
coord_flip() +
xlab('Breeds') +
ylab('Percentage trained') +
ggtitle("Belgian Malinois are the most trained dogs in New York") +
theme(text=element_text(size=16), plot.title = element_text(face = "bold", hjust = 0.5))
install.packages("shiny")
library(shiny)
runExample("01_hello")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(car)
library(gvlma)
setwd('/Users/ujjwalpeshin/Desktop/HW/stat_inference/HW3/')
data <- read.csv('./CpsWages.txt', sep = "")
head(data)
data %>% mutate_each_(funs(scale(.) %>% as.vector),vars=c("age","education", "experience"))
library(tidyverse)
data %>% mutate_each_(funs(scale(.) %>% as.vector),vars=c("age","education", "experience"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(car)
library(gvlma)
library(caret)
install.packages('caret')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(car)
library(gvlma)
library(caret)
library(caret)
install.packages('caret')
install.packages(mltools)
install.packages('mltools')
library(mltools)
one_hot(data, cols = c('race', 'occupation', 'sector'), sparsifyNAs = TRUE)
one_hot(data)
one_hot(data, cols = c('race', 'occupation', 'sector'))
c('race', 'occupation', 'sector')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(car)
library(gvlma)
library(mltools)
setwd('/Users/ujjwalpeshin/Desktop/HW/stat_inference/HW3/')
data <- data %>% mutate_each_(funs(scale(.) %>% as.vector),vars=c("age","education", "experience"))
data$race <- factor(data$race)
data$race <- factor(data$race)
data$race <- factor(data$race)
one_hot(data, cols = c('race', 'occupation', 'sector'), sparsifyNAs = TRUE)
one_hot(data, cols = c('race', 'occupation', 'sector'))
one_hot(data)
data.table::as.data.table(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(car)
library(gvlma)
library(data.table)
library(mltools)
setwd('/Users/ujjwalpeshin/Desktop/HW/stat_inference/HW3/')
data <- read.csv('./CpsWages.txt', sep = "")
head(data)
data <- data %>%
mutate_each_(funs(scale(.) %>% as.vector),vars=c("age","education", "experience"))
data$race <- factor(data$race)
data$occupation <- factor(data$occupation)
data$sector <- factor(data$sector)
data <- as.data.table(data)
one_hot(data)
# build correlation plot
res <- cor(data)
cor(dtaa)
data
as.data.frame(data)
cor(as.data.frame(data))
data
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(corrplot)
library(car)
library(gvlma)
library(data.table)
library(mltools)
setwd('/Users/ujjwalpeshin/Desktop/HW/stat_inference/HW3/')
data <- read.csv('./CpsWages.txt', sep = "")
head(data)
data <- data %>%
mutate_each_(funs(scale(.) %>% as.vector),vars=c("age","education", "experience"))
data$race <- factor(data$race)
data$occupation <- factor(data$occupation)
data$sector <- factor(data$sector)
data <- as.data.table(data)
data <- one_hot(data)
# build correlation plot
res <- cor(data)
round(res, 2)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(res, method = 'color', col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45,
insig = "blank", diag = FALSE)
# build correlation plot
res <- cor(data)
round(res, 2)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(res, method = 'color', col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45,
insig = "blank", diag = FALSE)
corrplot(res, method = 'color', col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45,
insig = "blank", diag = FALSE)
colnames(data)
wage.linear_model <- lm(wage ~ education + south + sex + union + race_1 + race_2 + occupation_1 + occupation_2 + occupation_3 + occupation_4 + occupation_5 + sector_0 + sector_1 + marr, data = data)
wage.linear_model <- lm(wage ~ education + south + sex + union + race_1 + race_2 + occupation_1 + occupation_2 + occupation_3 + occupation_4 + occupation_5 + sector_0 + sector_1 + marr, data = data)
summary(wage.linear_model)
# diagnostic plots
par(mfrow = c(2, 2))  # Split the plotting panel into a 2 x 2 grid
plot(wage.linear_model)
plot(wage.linear_model)
leveragePlots(wage.linear_model)
avPlots(wage.linear_model)
spreadLevelPlot(wage.linear_model)
gvmodel <- gvlma(wage.linear_model)
summary(gvmodel)
crPlots(wage.linear_model)
summary(wage.linear_model)
colnames(data)
wage.linear_model <- lm(wage ~ education + south + sex + union + race_1 + race_2 + occupation_1 + occupation_2 + occupation_3 + occupation_4 + occupation_5 + sector_0 + sector_1 + marr, data = data)
summary(wage.linear_model)
wage.linear_model <- lm(wage ~ education + south + sex + union + race_1 + race_2 + race_3 + occupation_1 + occupation_2 + occupation_3 + occupation_4 + occupation_5 + occupation_6 + sector_0 + sector_1 + sector_2 + marr, data = data)
summary(wage.linear_model)
wage.sector_model <-  lm(wage ~ education + south + sex + union + race_1 + race_2 + occupation_1 + occupation_2 + occupation_3 + occupation_4 + occupation_5 + marr, data = data)
# sse for the complete model
wage.linear_model.sse <- sum(wage.linear_model$residuals**2)
# sse for the model without the sector variable
wage.sector_model.sse <- sum(wage.sector_model$residuals**2)
# difference of the degrees of freedom of the sector model and the complete model
df_diff <- wage.sector_model$df.residual - wage.linear_model$df.residual
# mse of the complete model
wage.linear_model.mse <- mean(wage.linear_model$residuals^2)
sse_diff <-  wage.sector_model.sse - wage.linear_model.sse
f_stat <- (sse_diff/df_diff)/wage.linear_model.mse
# this f statistic can be used in the f distribution with dfs of wage.linear_model$df.residual and df_diff
p_value <- 1 - pf(f_stat, df_diff, wage.linear_model$df.residual)
alpha <- 0.05
if (p_value< alpha){
print('Significant')
}else{
print('Not significant')
}
p_value
# build correlation plot
res <- cor(data)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(res, method = 'color', col=col(200),
type="upper", order="hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45,
insig = "blank", diag = FALSE)
measurevar <- "wage"
groupvars  <- c("south", "sex", "union", "education", "race_1", "race_2",  "occupation_1", "occupation_2", "occupation_3", "occupation_4", "occupation_5", "sector_0", "sector_1", "marr")
wage.best_bic <- Inf
wage.best_model <- NULL
wage.best_formula <- NULL
# loop to get best model
for (i in 1:length(groupvars)){
for (j in 1:dim(combn(groupvars, i))[2]){
formula <- as.formula(paste(measurevar, paste(combn(groupvars, i)[,j], collapse=" + "), sep=" ~ "))
model <- lm(formula, data = data.frame(data))
bic <- BIC(model)
if (bic < wage.best_bic){
wage.best_formula <- formula
wage.best_bic <- bic
wage.best_model <- model
}
}
}
measurevar <- "wage"
groupvars  <- c("south", "sex", "union", "education", "race_1", "race_2",  "occupation_1", "occupation_2", "occupation_3", "occupation_4", "occupation_5", "sector_0", "sector_1", "marr")
wage.best_bic <- Inf
wage.best_model <- NULL
wage.best_formula <- NULL
# loop to get best model
for (i in 1:length(groupvars)){
for (j in 1:dim(combn(groupvars, i))[2]){
formula <- as.formula(paste(measurevar, paste(combn(groupvars, i)[,j], collapse=" + "), sep=" ~ "))
model <- lm(formula, data = data)
bic <- BIC(model)
if (bic < wage.best_bic){
wage.best_formula <- formula
wage.best_bic <- bic
wage.best_model <- model
}
}
}
wage.best_model
summary(wage.best_model)
measurevar <- "wage"
groupvars  <- c("south", "sex", "union", "education", "race_1", "race_2",  "occupation_1", "occupation_2", "occupation_3", "occupation_4", "occupation_5", "sector_0", "sector_1", "marr")
wage.best_bic <- Inf
wage.best_model <- NULL
wage.best_formula <- NULL
# loop to get best model
for (i in 1:length(groupvars)){
for (j in 1:dim(combn(groupvars, i))[2]){
formula <- as.formula(paste(measurevar, paste(combn(groupvars, i)[,j], collapse=" + "), sep=" ~ "))
model <- lm(formula, data = data)
bic <- AIC(model)
if (bic < wage.best_bic){
wage.best_formula <- formula
wage.best_bic <- bic
wage.best_model <- model
}
}
}
wage.best_model
summary(wage.best_model)
measurevar <- "wage"
groupvars  <- c("south", "sex", "union", "education", "race_1", "race_2",  "occupation_1", "occupation_2", "occupation_3", "occupation_4", "occupation_5", "sector_0", "sector_1", "marr")
wage.best_bic <- Inf
wage.best_model <- NULL
wage.best_formula <- NULL
# loop to get best model
for (i in 1:length(groupvars)){
for (j in 1:dim(combn(groupvars, i))[2]){
formula <- as.formula(paste(measurevar, paste(combn(groupvars, i)[,j], collapse=" + "), sep=" ~ "))
model <- lm(formula, data = data)
bic <- BIC(model)
if (bic < wage.best_bic){
wage.best_formula <- formula
wage.best_bic <- bic
wage.best_model <- model
}
}
}
summary(wage.best_model)
new_data <- data[-c(171, 200), ]
wage.new_data_model <- lm(wage.best_formula, data = new_data)
summary(wage.new_data_model)
par(mfrow = c(2, 2))  # Split the plotting panel into a 2 x 2 grid
plot(wage.new_data_model)
clear
clr
clrscr
## Import libraries ----
library(tidyverse)
library(scales)   # to access breaks/formatting functions
## Setwd ----
setwd('/Users/ujjwalpeshin/Desktop/sustainable_peace_reddit/')
## Import Data ----
data <- read.csv('./conflicting_comments.csv')
## Testing ----
# define interactions
rep_to_rep <- data[(data$submission_group=='Republican') & (data$comment_group=='Republican'), 17]
rep_to_dem <- data[(data$submission_group=='Republican') & (data$comment_group=='democrats'), 17]
dem_to_rep <- data[(data$submission_group=='democrats') & (data$comment_group=='Republican'), 17]
dem_to_dem <- data[(data$submission_group=='democrats') & (data$comment_group=='democrats'), 17]
# define testing parameters
alpha <- 0.05
df <- (2 * 500) - 2
no_of_tests <- 1000
seed <- 8
set.seed(seed)
# find bootstrap samples
rep_to_rep_bootstrap <- replicate(no_of_tests, sample(rep_to_rep, replace = TRUE))
rep_to_dem_bootstrap <- replicate(no_of_tests, sample(rep_to_dem, replace = TRUE))
dem_to_rep_bootstrap <- replicate(no_of_tests, sample(dem_to_rep, replace = TRUE))
dem_to_dem_bootstrap <- replicate(no_of_tests, sample(dem_to_dem, replace = TRUE))
one_and_two_val <- 0
one_and_three_val <- 0
one_and_four_val <- 0
two_and_three_val <- 0
two_and_four_val <- 0
three_and_four_val <- 0
# testing stat
for (i in 1:no_of_tests){
# generate samples
rep_to_rep_sample <- sample(rep_to_rep_bootstrap[,i], size = 100, replace = TRUE)
rep_to_dem_sample <- sample(rep_to_dem_bootstrap[,i], size = 100, replace = TRUE)
dem_to_rep_sample <- sample(dem_to_rep_bootstrap[,i], size = 100, replace = TRUE)
dem_to_dem_sample <- sample(dem_to_dem_bootstrap[,i], size = 100, replace = TRUE)
# generate variances
rep_to_rep_var <- var(rep_to_rep_sample)
rep_to_dem_var <- var(rep_to_dem_sample)
dem_to_rep_var <- var(dem_to_rep_sample)
dem_to_dem_var <- var(dem_to_dem_sample)
# generate std_dev
one_and_two_std <- sqrt((rep_to_rep_var + rep_to_dem_var)/2)
one_and_three_std <- sqrt((rep_to_rep_var + dem_to_rep_var)/2)
one_and_four_std <- sqrt((rep_to_rep_var + dem_to_dem_var)/2)
two_and_three_std <- sqrt((rep_to_dem_var + dem_to_rep_var)/2)
two_and_four_std <- sqrt((rep_to_rep_var + dem_to_dem_var)/2)
three_and_four_std <- sqrt((dem_to_rep_var + dem_to_dem_var)/2)
# find t-test values
one_and_two_t <- (mean(rep_to_rep_sample) + mean(rep_to_dem_sample))/ (one_and_two_std*sqrt(2/500))
one_and_three_t <- (mean(rep_to_rep_sample) + mean(dem_to_rep_sample))/ (one_and_three_std*sqrt(2/500))
one_and_four_t <- (mean(rep_to_rep_sample) + mean(dem_to_dem_sample))/ (one_and_four_std*sqrt(2/500))
two_and_three_t <- (mean(rep_to_dem_sample) + mean(dem_to_rep_sample))/ (two_and_three_std*sqrt(2/500))
two_and_four_t <- (mean(rep_to_dem_sample) + mean(dem_to_dem_sample))/ (two_and_four_std*sqrt(2/500))
three_and_four_t <- (mean(dem_to_rep_sample) + mean(dem_to_dem_sample))/ (three_and_four_std*sqrt(2/500))
# find p_values
one_and_two_p<- 1 - pt(one_and_two_t, df = df)
one_and_three_p<- 1 - pt(one_and_three_t, df = df)
one_and_four_p<- 1 - pt(one_and_four_t, df = df)
two_and_three_p<- 1 - pt(two_and_three_t, df = df)
two_and_four_p<- 1 - pt(two_and_four_t, df = df)
three_and_four_p<- 1 - pt(three_and_four_t, df = df)
if (one_and_two_p < alpha){
one_and_two_val <- one_and_two_val + 1
}
if (one_and_three_p < alpha){
one_and_three_val <- one_and_three_val + 1
}
if (one_and_four_p < alpha){
one_and_four_val <- one_and_four_val + 1
}
if (two_and_three_p < alpha){
two_and_three_val <- two_and_three_val + 1
}
if (two_and_four_p < alpha){
two_and_four_val <- two_and_four_val + 1
}
if (three_and_four_p < alpha){
three_and_four_val <- three_and_four_val + 1
}
seed  <- seed + 1
set.seed(seed)
}
print(one_and_two_val)
print(one_and_three_val)
print(one_and_four_val)
print(two_and_three_val)
print(two_and_four_val)
print(three_and_four_val)
data$conversation <- paste(data$submission_group, 'to', data$comment_group)
data_1 <- data[data$conversation == unique(data$conversation)[1] |
data$conversation == unique(data$conversation)[2] |
data$conversation == unique(data$conversation)[5] |
data$conversation == unique(data$conversation)[6],]
ggplot()+
geom_density(aes(compound_sentiment,  color = conversation), data = data_1)
ggplot() + geom_density(aes(rep_to_rep_sample))
ggplot() + geom_density(aes(rep_to_dem_sample))
ggplot() + geom_density(aes(dem_to_rep_sample))
ggplot() + geom_density(aes(dem_to_dem_sample))
